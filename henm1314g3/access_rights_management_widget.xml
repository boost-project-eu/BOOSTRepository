<?xml version="1.0" encoding="UTF-8" ?>
<Module>

    <ModulePrefs title="Role"
		description="Manage the access rights of all the different users."
		author="Team Boost"
		author_email="henm1314g3@dbis.rwth-aachen.de"
		height="450"
		width="500">
  	<Require feature="opensocial-0.8" />
    <Require feature="openapp" />
    <OAuth>
		<Service name="openapp"
		    xmlns:openapp="http://www.role-project.eu/xml/openapp/opensocialext/"
		    openapp:service="http://purl.org/role/terms/spaceService"
		    openapp:permitReadAppend="http://purl.org/role/terms/data">

		    <Request method="" url=""/>
			<Authorization url=""/>
			<Access method="" url=""/>
		</Service>
    </OAuth>
    </ModulePrefs>

    <Content type="html">
    <![CDATA[

		<!-- We use jQuery to manipulate DOM and Bootstrap for the interface. -->
		<script src="http://127.0.0.1:8073/role/BOOSTRepository/henm1314g3/js/require.js"></script>

		<!-- Define CSS -->
		<link rel="stylesheet" href="http://127.0.0.1:8073/role/BOOSTRepository/henm1314g3/css/bootstrap.min.css">
		<link rel="stylesheet" href="http://127.0.0.1:8073/role/BOOSTRepository/henm1314g3/css/slider.css">
		<link rel="stylesheet" href="http://127.0.0.1:8073/role/BOOSTRepository/henm1314g3/ladda/ladda-themeless.min.css">
		<link href="//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css" rel="stylesheet">

		<!-- JavaScript Block -->
		<script>

			require( ['http://127.0.0.1:8073/role/BOOSTRepository/henm1314g3/js/config.js'], function (config){
			require( [
				"i18n!http://127.0.0.1:8073/role/BOOSTRepository/henm1314g3/js/nls/access.js",
				"async",
				"bootbox",
				"ractive",
				"lodash",
			    "jquery",
			    "bootstrap",
			    "EmployeeManager",
			    "spin",
			    "ladda",
			    "BCNManager",
			    "AccessRightsManager",
			    "iwc",
			    "UserManager",
			    "utils"
			    ], function(tr, a, b, r, _) {
			    	
			    	translations= tr;
			    	async = a;
			    	bootbox = b;
			    	Ractive = r;
					var space;
					var iwcClient;
					var userList;
					var accessRights;
					var employeesList;
					var bcnsList;
					var currentUser;

					//Define the ractives as globals
					var ractiveOverview;

					if (openapp.param.user()) {
						closeAutorisationWindow();
					}

					space = new openapp.oo.Resource(openapp.param.space());
					iwcClient = new iwc.Client();
					iwcClient.connect(iwcCallback);

					//gadgets.util.registerOnLoadHandler(init);
					
					//validation for 
					setTimeout(function() { 
						if ($("input[type=checkbox]:checked.employeeCheckbox").length < 2)
							$("input[type=checkbox]:checked.employeeCheckbox").attr("disabled", true);
						else
							$("input[type=checkbox]:checked.employeeCheckbox").attr("disabled", false);
					}, 2000);

					function iwcCallback(intent){
						if((intent.action == "BCN_CREATE") || (intent.action == "BCN_UPDATE")){

							var message = "<div>" + translations.STR_GOALS_HAVE_CHANGED + translations.STR_PLEASE_WAIT + "</div>"
							message = message + "<div><center><img style='margin-left:5px;' id='loader' src='http://127.0.0.1:8073/role/BOOSTRepository/henm1314g3/resources/loader.gif'></center></div>";
							bootbox.dialog({
								title : "<span style='margin-right:5px;' class='glyphicon glyphicon-refresh'></span>" + translations.STR_GOALS_HAVE_CHANGED,
								message : message,
								closeButton : false
							});
							createBCNfromUri(intent.data, function(bcn){
								if(intent.action == "BCN_CREATE"){
									//Add the new BCN to the local list
									bcnsList.push(bcn);
								}
								else{
									//Replace the BCN in the local list with the updated one
									for(var i = 0; i < bcnsList.length; i++){
										if(bcn.uri == bcnsList[i].uri)
											bcnsList[i] = bcn;
									}
								}
								bootbox.hideAll();
							});
						}
						if(intent.action == "LANGUAGE_CHANGED"){
							window.location.reload();
						}
					}

					function publishAccessRightsChanged(){
						var intent = {
							component: "",
							data: "",
							dataType: "text/json",
							flags :["PUBLISH_GLOBAL"],
							action: "ACCESS_RIGHTS_CHANGED"
						};

						iwcClient.publish(intent);
					}

					function createEmployeeIfNotExist(user, accessRights, employeesList){
						accessRights.update(function(){
							if(accessRights.getUserAccessRights(user.uri).isEmployee){
								var foundEmployeeData = false;
								_.each(employeesList, function(employee){
									if(employee.userUri == user.uri){
										foundEmployeeData = true;
									}
								});

								if(!foundEmployeeData){
									createEmployeeFromUser(user, bcnsList, function(employee){
										employeesList.push(employee);
										publishAccessRightsChanged();
									});
								}
								else{
									publishAccessRightsChanged();
								}
							}
							else{
								publishAccessRightsChanged();
							}
						});
					}

					function sortUsers(users){
						users.sort(function (a, b){
							if(a.name.toLowerCase() < b.name.toLowerCase())
								return -1; else return 1;
						});
					}

					

					$(function(){


						retrieveAllUsers(space, function(users){
							retrieveAccessRights(function(access){
								retrieveAllEmployees(space, function(employees){
									retrieveAllBcns(space, function(bcns){

										userList = users;
										accessRights = access;
										employeesList = employees;
										bcnsList = bcns;

										sortUsers(userList);

										//retrieve current employee

										for(var i = 0; i < userList.length; i++){
											var user = userList[i];
											if (user.uri == openapp.param.user()){
												currentUser = user;
												if (currentUser) {
													currentUser.AccessRights = accessRights.getUserAccessRights(currentUser.uri);
													if(currentUser.uri){
														createEmployeeIfNotExist(currentUser, accessRights, employeesList);
													}
												} else {
													currentUser = {};
													currentUser.AccessRights.isManager = false;
													currentUser.AccessRights.isEmployee = false;
													currentUser.AccessRights.hasAgreedToLicense = false;

												}

											};
										};

										//Match all users with their access rights which are stored in the config
										//resource

										var managerExists = false;
										var owner = null;
										for(var i = 0; i < userList.length; i++){
											var user = userList[i];
											user.accessRights = accessRights.getUserAccessRights(user.uri);
											managerExists = (user.accessRights.isManager);
											if(user.isOwner)
												owner = user;
										}

										//Debug
										//owner.accessRights.hasAgreedToLicense = true;
										if (owner)
											owner.accessRights.isManager = true;
										
										//hide owner of the space
										if (!currentUser.isOwner)
										{
											userList = _.filter(userList, function(user){
												return user.isOwner == false;
											});
										}
										
										//Check if user has agreed to license
										if(!accessRights.getUserAccessRights().hasAgreedToLicense){
											showModalAcceptTermsOfUse();

										} 
										// else if(!accessRights.getUserAccessRights().isManager){
											// showModalContactManager();
										// }

										ractiveOverview = new Ractive({
											el: 'containerUserOverview',
										    template: '#templateUserOverview',
										    data: {
										    	"userList" : userList,
										    	"currentUser": currentUser,
										    	"text": translations
										    },
										    append: true
										});

										ractiveOverview.on({
											accessRightsChanged: function(event){
												//validation for manager checkbox
												if ($("input[type=checkbox]:checked.employeeCheckbox").length < 2)
													$("input[type=checkbox]:checked.employeeCheckbox").attr("disabled", true);
												else
													$("input[type=checkbox]:checked.employeeCheckbox").attr("disabled", false);
												user = event.context;
												createEmployeeIfNotExist(user, accessRights, employeesList);
											},
											showHelp: function(event){
												$('#descriptionModal').modal({
													keyboard: true
												});
											}
										});

										ractiveHelp = new Ractive({
											el: 'descriptionModal',
										    template: '#templatemModalHelp',
										    data: {
										    	"text": translations
										    },
										    append: true
										});
									});
								});
							});
						});
					});
				});
			});
			
			
		</script>

		<!-- HTML Block -->

		<div style="overflow-y: scroll; height:450px;">
		<div class="panel panel-primary" id="containerUserOverview">
		  	<script id="templateUserOverview" type='text/ractive'>
			<div class="panel-heading">
					<button id="question" on-click="showHelp" type="button" class="btn btn-default launch-modal" style="float:right; margin:-5 5 10 5px; color:#428BCA;"><span  class="glyphicon glyphicon-question-sign"></span></button>
					<h3 class="panel-title">
					<i class="fa fa-users" style="margin-right:5px;"></i>{{{text.STR_ACCESS_RIGHTS}}}
				</h3>
		  	</div>

			{{^currentUser.AccessRights.isManager}}
				{{#currentUser.AccessRights.isEmployee}}
					<div class="alert alert-info" role="alert" style="margin-bottom:0px;">
						{{{text.STR_YOU_HAVE_THE_ROLE_EMPLOYEE_YOU}}}
					</div>
				{{/currentUser.AccessRights.isEmployee}}

				{{^currentUser.AccessRights.isEmployee}}
					<div class="alert alert-danger" role="alert" style="margin-bottom:0px;">
						{{{text.STR_YOU_HAVE_NO_ROLE}}}
					</div>
				{{/currentUser.AccessRights.isEmployee}}
			{{/currentUser.AccessRights.isManager}}

			{{#currentUser.AccessRights.isManager}}
				<div class="alert alert-info" role="alert" style="margin-bottom:0px;">
					{{#currentUser.AccessRights.isEmployee}}
							{{{text.STR_YOU_HAVE_ROLES_MANAGER_AND_EMPLOYEE}}}
							</br>
					{{/currentUser.AccessRights.isEmployee}}

					{{^currentUser.AccessRights.isEmployee}}
							{{{text.STR_YOU_HAVE_THE_ROLE_MANAGER}}}
					{{/currentUser.AccessRights.isEmployee}}

					{{{text.STR_TO_SEE_THE_SPACE_AS_EMPLOYEE}}}

				</div>


					<table class="table table-striped table-bordered" >
					    <tbody>
					    	<tr><th>{{{text.STR_NAME}}}</th><th style="text-align:center">{{{text.STR_MANAGER}}}</th><th style="text-align:center">{{{text.STR_EMPLOYEE}}}</th></tr>

							{{#userList}}
								<tr>
									<td >
										<p class="{{accessRights.hasAgreedToLicense ? "" : "text-muted"}}">{{name}}
										{{^accessRights.hasAgreedToLicense}}
										<span title="This user needs to agree to the terms of use first." class="glyphicon glyphicon-exclamation-sign"></span>
										{{/accessRights.hasAgreedToLicense}}
										{{#isOwner}}
										<span title="{{{text.STR_USER_NEEDS_TO_AGREE_TERMS}}}" class="glyphicon glyphicon-asterisk"></span>
										{{/isOwner}}
										</p>

									</td>
									<td align="center">
										<label class="checkbox-inline">
										  <input class="employeeCheckbox"  on-click="accessRightsChanged" type="checkbox" checked='{{accessRights.isManager}}' disabled={{!accessRights.hasAgreedToLicense}}>
										</label>
									</td>
									<td align="center">
										<label class="checkbox-inline">
										  <input on-click="accessRightsChanged" type="checkbox" checked='{{accessRights.isEmployee}}' disabled={{!accessRights.hasAgreedToLicense}}>
										</label>
									</td>
								</tr>
							{{/userList}}
					    </tbody>
					</table>
				{{/currentUser.AccessRights.isManager}}
		</script>

		</div>
		</div>



	<div class="modal fade" id="descriptionModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
      	<script id="templatemModalHelp" type='text/ractive'>
	      	<div class="modal-dialog">

	        	<div class="modal-content">
	          		<div class="modal-header">
	          			<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
	    				<h4 class="modal-title">{{{text.STR_ACCESS_RIGHTS_HELP}}}</h4>
	            	</div>
	          		<div class="modal-body">
	            		<div class="panel-group" id="levelsdef" align="justify">
	            			<p>{{{text.STR_IN_THIS_WIDGET_MANAGER_CAN_DIFFERENTIATE}}}</p>
	             			<ul style="padding: 10px;">
				 				<li>
				 					{{{text.STR_TO_ASSING_A_MANAGER_OR_AN_EMPLOYEE}}}
				 				</li>
				 				<ul style="padding: 10px;">

	                				<li>
	                					<strong>{{{text.STR_EMPLOYEE_COLONS}}}</strong>
	                					<p>{{{text.STR_CAN_SEARCH_THROUGH_THE_LEARNING}}}</p>
	                				</li>
		                			<li><strong>{{{text.STR_MANAGER_COLONS}}}</strong>
		                				<p>{{{text.STR_HAS_FULL_CONTROL_OVER_THE_SYSTEM}}}</p>
		                			</li>
	              				</ul>
	             				<li><span class="glyphicon glyphicon-asterisk"></span>{{{text.STR_USER_OWNER_OF_SPACE}}}</li>
	             				<li><i class="fa fa-exclamation-circle" style="color: gray;"></i> {{{text.STR_THIS_USER_HAS_NOT_AGREED_TO_THE}}}</li>
	             			</ul>
	          			</div>
	          		</div>
	          		<div class="modal-footer">
	                	<button type="button" class="btn btn-default" data-dismiss="modal">{{{text.STR_CLOSE}}}</button>
	          		</div>
	        	</div>
	      	</div>
      	</script>
    </div>


	]]>
  </Content>
</Module>
